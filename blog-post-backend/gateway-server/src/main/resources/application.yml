spring:
  application:
    name:
      gateway-server
  profiles:
    active: ${SPRING_PROFILES_ACTIVE:dev}
  main:
    web-application-type: reactive
#  security:
#    oauth2:
#      client:
#        registration:
#          keycloak.
#            client-id: gateway-client
#            client-secret: LcRCKCa3TbisItkBpU9UmPcnwPOpATCO
#            scope: openid, profile, email
#            authorization-grant-type: authorization_code
#            redirect-uri: http://localhost:8072/login/oauth2/code/keycloak
#        provider:
#          keycloak:
#            issuer-uri: http://keycloak:8080/realms/blog-post-realm
#      resourceserver:
#        jwt:
#          issuer-uri: http://keycloak:8080/realms/blog-post-realm
#  security:
#    oauth2:
#      client:
#        provider:
#          keycloak:
#            issuer-uri: http://keycloak:8080/auth/realms/blog-post-realm
#        registration:
#          keycloak:
#            client-id: gateway-client
#            client-secret: LcRCKCa3TbisItkBpU9UmPcnwPOpATCO
#            authorization-grant-type: authorization_code
#            redirect-uri: '{baseUrl}/login/oauth2/code/keycloak'
#      resourceserver:
#        jwt:
#          issuer-uri: http://keycloak:8080/realms/blog-post-realm
#
#keycloak:
#  auth-server-url: http://keycloak:8080/auth
#  realm: blog-post-realm
#  resource: gateway-client
#  credentials:
#    secret: LcRCKCa3TbisItkBpU9UmPcnwPOpATCO
#    ssl-required: external
#    use-resource-role-mappings: true
#  security-constraints:
#    - authRoles:
#        - USER
#        - ADMIN
#        - SUPER_ADMIN
#      securityCollections:
#        - patterns:
#            - "/*"


  jpa:
    hibernate:
      ddl-auto: none
    show-sql: true
    open-in-view: false
  datasource:
    driverClassName: org.postgresql.Driver
    username: ${POSTGRES_USER:"{cipher}116c45733072ecd24f41f4ddd289261e663a42b2c7634278b2ccc3cb303370e2"}
    password: ${POSTGRES_PASSWORD:"{cipher}720abc8f84b313cf215850ae5591f09aac4b13c93b7fddb0229895e392e30eb1"}
    url: jdbc:postgresql://database:5432/user_db

  security:
    oauth2:
      client:
        registration:
          google:
            client-id: ${OAUTH2_CLIENT_ID}
            client-secret: ${OAUTH2_CLIENT_SECRET}

frontend:
  url: http://localhost:3000




#
#  security:
#    oauth2:
#      client:
#        provider:
#          keycloak:
#            issuer-uri:  ${ISSUER_URI:http://localhost:8080/realms/blog-post-realm}
#        registration:
#          keycloak-login:
#            provider: keycloak
#            authorization-grant-type: authorization_code
#            client-id: ${CLIENT_ID:gateway-client}
#            client-secret: ${CLIENT_SECRET:LcRCKCa3TbisItkBpU9UmPcnwPOpATCO}
#            scope: openid,profile,email,offline_access
#
#
#com:
#  c4-soft:
#    springaddons:
#      oidc:
#        ops:
#          - iss: ${ISSUER_URI:http://localhost:8080/realms/blog-post-realm}
#            username-claim: preferred_username
#            authorities:
#              - path: $.realm_access.roles
#              - path: $.resource_access.*.roles
#        client:
#          client-uri: ${BASE_URL:http://localhost:${server.port}}
#          security-matchers: /**
#          permit-all:
#            - /
#            - /login/**
#            - /oauth2/**
#          csrf: cookie-accessible-from-js
#          post-login-redirect-path: /home
#          post-logout-redirect-path: /


#  security:
#    oauth2:
#      resource-server:
#        jwt:
#server:
#  address: 0.0.0.0
#          jwk-set-uri: ${ISSUER_URI:http://localhost:8080/realms/blog-post-realm/protocol/openid-connect/certs}