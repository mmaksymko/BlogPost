version: 3.8.0
services:
  database:
    image: postgres:latest
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: "blog_db"
    volumes:
      - ./docker/init.sql:/docker-entrypoint-initdb.d/1-init.sql
      - db-data:/var/lib/postgresql/data
    networks:
      backend:
        aliases:
          - "database"
          - "postgres"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
  config-server:
    build:
      context: ../config-server
      dockerfile: Dockerfile
    image: mmaksymko/blog-post-config-server:latest
    ports:
      - "8071:8071"
    environment:
      SPRING_PROFILES_ACTIVE: prod
      ENCRYPT_ENABLED: false
    networks:
      backend:
        aliases:
          - "config-server"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8071/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
  discovery-server:
    build:
      context: ../discovery-server
      dockerfile: Dockerfile
    image: mmaksymko/blog-post-discovery-server:latest
    ports:
      - "8070:8070"
    environment:
      SPRING_PROFILES_ACTIVE: prod
    depends_on:
      database:
        condition: service_healthy
      config-server:
        condition: service_healthy
    networks:
      backend:
        aliases:
          - "discovery-server"
  gateway-server:
    build:
      context: ../gateway-server
      dockerfile: Dockerfile
    image: mmaksymko/blog-post-gateway-server:latest
    environment:
      SPRING_PROFILES_ACTIVE: prod
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      OAUTH2_CLIENT_ID: ${OAUTH2_CLIENT_ID}
      OAUTH2_CLIENT_SECRET: ${OAUTH2_CLIENT_SECRET}
      JWT_SECRET_KEY: ${JWT_SECRET_KEY}
    depends_on:
      config-server:
        condition: service_healthy
      discovery-server:
        condition: service_started
      redis:
        condition: service_healthy
    ports:
      - "8080:8080"
    networks:
      backend:
        aliases:
          - "gateway-server"
  blog-post-service:
    build:
      context: ../blog-post-service
      dockerfile: Dockerfile
    image: mmaksymko/blog-post-post-service:latest
    environment:
      SPRING_PROFILES_ACTIVE: prod
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      JWT_SECRET_KEY: ${JWT_SECRET_KEY}
    depends_on:
      database:
        condition: service_healthy
      config-server:
        condition: service_healthy
      kafka:
        condition: service_started
    ports:
      - "8081:8081"
    networks:
      backend:
        aliases:
          - "blog-post-service"
  comments-service:
    build:
      context: ../comments-service
      dockerfile: Dockerfile
    image: mmaksymko/blog-post-comments-service:latest
    environment:
      SPRING_PROFILES_ACTIVE: prod
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      JWT_SECRET_KEY: ${JWT_SECRET_KEY}
    depends_on:
      database:
        condition: service_healthy
      config-server:
        condition: service_healthy
      kafka:
        condition: service_started
      redis:
        condition: service_healthy
    ports:
      - "8082:8082"
    networks:
      backend:
        aliases:
          - "comments-service"
  reactions-service:
    build:
      context: ../reactions-service
      dockerfile: Dockerfile
    image: mmaksymko/blog-post-reactions-service:latest
    environment:
      SPRING_PROFILES_ACTIVE: prod
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      JWT_SECRET_KEY: ${JWT_SECRET_KEY}
    depends_on:
      database:
        condition: service_healthy
      config-server:
        condition: service_healthy
      kafka:
        condition: service_started
      redis:
        condition: service_healthy
    ports:
      - "8083:8083"
    networks:
      backend:
        aliases:
          - "reactions-service"
  users-service:
    build:
      context: ../users-service
      dockerfile: Dockerfile
    image: mmaksymko/blog-post-users-service:latest
    environment:
      SPRING_PROFILES_ACTIVE: prod
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      JWT_SECRET_KEY: ${JWT_SECRET_KEY}
    depends_on:
      database:
        condition: service_healthy
      config-server:
        condition: service_healthy
      kafka:
        condition: service_started
    ports:
      - "8085:8085"
    networks:
      backend:
        aliases:
          - "users-service"
  email-service:
    build:
      context: ../email-service
      dockerfile: Dockerfile
    image: mmaksymko/blog-post-email-service:latest
    environment:
      SPRING_PROFILES_ACTIVE: prod
      EMAIL_USERNAME: ${EMAIL_USERNAME}
      EMAIL_PASSWORD: ${EMAIL_PASSWORD}
      JWT_SECRET_KEY: ${JWT_SECRET_KEY}
    depends_on:
      config-server:
        condition: service_healthy
      kafka:
        condition: service_started
    ports:
      - "8086:8086"
    networks:
      backend:
        aliases:
          - "email-service"
  images-service:
    build:
      context: ../images-service
      dockerfile: Dockerfile
    image: mmaksymko/blog-post-images-service:latest
    environment:
      SPRING_PROFILES_ACTIVE: prod
      MINIO_ACCESS_KEY: ${MINIO_ACCESS_KEY}
      MINIO_SECRET_KEY: ${MINIO_SECRET_KEY}
      JWT_SECRET_KEY: ${JWT_SECRET_KEY}
    depends_on:
      config-server:
        condition: service_healthy
      minio:
        condition: service_healthy
    ports:
      - "8084:8084"
    networks:
      backend:
        aliases:
          - "images-service"
  kafka:
    image: bitnami/kafka:latest
    environment:
      - KAFKA_CFG_NODE_ID=1
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=1@kafka:9093
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
    ports:
      - "9092:9092"
      - "9093:9093"
    networks:
      backend:
        aliases:
          - kafka
  redis:
    image: bitnami/redis:latest
    restart: always
    ports:
      - "6379:6379"
    volumes:
      - /docker/d–∞ta:/root/redis
      - /docker/redis_data.conf:/usr/local/etc/redis/redis.conf
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - REDIS_PORT=6379
      - REDIS_DATABASES=16
    networks:
      backend:
        aliases:
          - redis
    healthcheck:
      test: ["CMD", "redis-cli", "-h", "localhost", "-p", "6379", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
  minio:
    image: docker.io/bitnami/minio:latest
    ports:
      - '9000:9000'
      - '9001:9001'
    volumes:
      - 'minio_data:/data'
    environment:
      - MINIO_ROOT_USER=${MINIO_ACCESS_KEY}
      - MINIO_ROOT_PASSWORD=${MINIO_SECRET_KEY}
      - MINIO_DEFAULT_BUCKETS=post-images
    healthcheck:
      test: ["CMD", "sh", "-c", "mc alias set local http://localhost:9000 $MINIO_ACCESS_KEY $MINIO_SECRET_KEY && mc admin info local"]
      interval: 30s
      timeout: 20s
      retries: 3
    networks:
      backend:
        aliases:
          - minio
networks:
  backend:
    driver: bridge

volumes:
  db-data:
  minio_data: