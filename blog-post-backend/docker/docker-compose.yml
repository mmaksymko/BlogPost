version: 2.7.0
services:
  database:
    image: postgres:latest
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: "blog_db"
    volumes:
      - ./docker/init.sql:/docker-entrypoint-initdb.d/1-init.sql
      - db-data:/var/lib/postgresql/data
    networks:
      backend:
        aliases:
          - "database"
          - "postgres"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
  config-server:
    build:
      context: ../config-server
      dockerfile: Dockerfile
    image: mmaksymko/blog-post-config-server:latest
    ports:
      - "8071:8071"
    environment:
      SPRING_PROFILES_ACTIVE: prod
      BLOGPOST_ENCRYPTION_KEY: ${BLOGPOST_ENCRYPTION_KEY}
    networks:
      backend:
        aliases:
          - "config-server"
  discovery-server:
    build:
      context: ../discovery-server
      dockerfile: Dockerfile
    image: mmaksymko/blog-post-discovery-server:latest
    ports:
      - "8070:8070"
    environment:
      SPRING_PROFILES_ACTIVE: prod
    depends_on:
      database:
        condition: service_healthy
      config-server:
        condition: service_started  
    networks:
      backend:
        aliases:
          - "discovery-server"
  gateway-server:
    build:
      context: ../gateway-server
      dockerfile: Dockerfile
    image: mmaksymko/blog-post-gateway-server:latest
    environment:
      SPRING_PROFILES_ACTIVE: prod
    depends_on:
      config-server:
        condition: service_started
      discovery-server:
        condition: service_started
    ports:
      - "8080:8080"
    networks:
      backend:
        aliases:
          - "gateway-server"
  blog-post-service:
    build:
      context: ../blog-post-service
      dockerfile: Dockerfile
    image: mmaksymko/blog-post-post-service:latest
    environment:
      SPRING_PROFILES_ACTIVE: prod
      BLOGPOST_ENCRYPTION_KEY: ${BLOGPOST_ENCRYPTION_KEY}
    depends_on:
      database:
        condition: service_healthy
      config-server:
        condition: service_started
    ports:
      - "8081:8081"
    networks:
      backend:
        aliases:
          - "blog-post-service"
  comments-service:
    build:
      context: ../comments-service
      dockerfile: Dockerfile
    image: mmaksymko/blog-post-comments-service:latest
    environment:
      SPRING_PROFILES_ACTIVE: prod
      BLOGPOST_ENCRYPTION_KEY: ${BLOGPOST_ENCRYPTION_KEY}
    depends_on:
      database:
        condition: service_healthy
      config-server:
        condition: service_started
    ports:
      - "8082:8082"
    networks:
      backend:
        aliases:
          - "comments-service"
  reactions-service:
    build:
      context: ../reactions-service
      dockerfile: Dockerfile
    image: mmaksymko/blog-post-reactions-service:latest
    environment:
      SPRING_PROFILES_ACTIVE: prod
      BLOGPOST_ENCRYPTION_KEY: ${BLOGPOST_ENCRYPTION_KEY}
    depends_on:
      database:
        condition: service_healthy
      config-server:
        condition: service_started
    ports:
      - "8083:8083"
    networks:
      backend:
        aliases:
          - "reactions-service"
  # keycloak:
  #   image: keycloak/keycloak
  #   restart: always
  #   environment:
  #     KEYCLOAK_VERSION: 24.0.4-0
  #     KEYCLOAK_USER: ${KEYCLOAK_USER}
  #     KEYCLOAK_PASSWORD: ${KEYCLOAK_PASSWORD}
  #     KC_DB: postgres
  #     KC_DB_URL: jdbc:postgresql://postgres/keycloak
  #     KC_DB_USERNAME: ${KEYCLOAK_USER}
      # KC_DB_PASSWORD: ${KEYCLOAK_PASSWORD}
  #   volumes:
  #       - ./realm-export.json:/opt/jboss/keycloak/realm-export.json
    # command:
  #     - "-b 0.0.0.0"
  #     - "-Dkeycloak.import=/opt/jboss/keycloak/realm-export.json"
    #   - "-Dkeycloak.profile.feature.scripts=enabled"
    #   - "-Dkeycloak.profile.feature.upload_scripts=enabled"
    # ports:
    #   - "8072:8080"
    # networks:
    #   backend:
    #     aliases:
    #       - "keycloak"
  
networks:
  backend:
    driver: bridge

volumes:
  db-data: